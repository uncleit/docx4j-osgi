Index: /home/dev/workspace/fop/src/java/org/apache/fop/fonts/autodetect/FontInfoFinder.java
===================================================================
--- /home/dev/workspace/fop/src/java/org/apache/fop/fonts/autodetect/FontInfoFinder.java	(revision 711795)
+++ /home/dev/workspace/fop/src/java/org/apache/fop/fonts/autodetect/FontInfoFinder.java	(working copy)
@@ -151,7 +151,10 @@
         }
         EmbedFontInfo fontInfo = new EmbedFontInfo(null, customFont.isKerningEnabled(),
                 fontTripletList, embedUrl, subFontName);
+        fontInfo.setPanose(customFont.getPanose());
         fontInfo.setPostScriptName(customFont.getFontName());
+        fontInfo.setEmbeddable(customFont.isEmbeddable());
+        
         if (fontCache != null) {
             fontCache.addFont(fontInfo);
         }
Index: /home/dev/workspace/fop/src/java/org/apache/fop/fonts/CIDFontType.java
===================================================================
--- /home/dev/workspace/fop/src/java/org/apache/fop/fonts/CIDFontType.java	(revision 711795)
+++ /home/dev/workspace/fop/src/java/org/apache/fop/fonts/CIDFontType.java	(working copy)
@@ -19,7 +19,8 @@
 
 package org.apache.fop.fonts;
 
-import org.apache.avalon.framework.ValuedEnum;
+//import org.apache.avalon.framework.ValuedEnum;
+import org.apache.fop.fonts.ValuedEnum;
 
 /**
  * This class enumerates all supported CID font types.
Index: /home/dev/workspace/fop/src/java/org/apache/fop/fonts/CustomFont.java
===================================================================
--- /home/dev/workspace/fop/src/java/org/apache/fop/fonts/CustomFont.java	(revision 711795)
+++ /home/dev/workspace/fop/src/java/org/apache/fop/fonts/CustomFont.java	(working copy)
@@ -17,6 +17,11 @@
 
 /* $Id$ */
 
+/* NOTICE: This file has been changed by Plutext Pty Ltd for use in docx4j.
+ * 
+ * This notice is included to meet the condition in clause 4(b) of the License. 
+ */
+
 package org.apache.fop.fonts;
 
 import java.io.IOException;
@@ -58,6 +63,26 @@
 
     private boolean useKerning = true;
 
+    private boolean isEmbeddable = true;
+
+	public boolean isEmbeddable() {
+		return isEmbeddable;
+	}
+
+	public void setEmbeddable(boolean isEmbeddable) {
+		this.isEmbeddable = isEmbeddable;
+	}
+
+	private Panose panose = null;
+
+	public Panose getPanose() {
+		return panose;
+	}
+
+	public void setPanose(Panose panose) {
+		this.panose = panose;
+	}
+    
     /** {@inheritDoc} */
     public String getFontName() {
         return fontName;
Index: /home/dev/workspace/fop/src/java/org/apache/fop/fonts/EmbedFontInfo.java
===================================================================
--- /home/dev/workspace/fop/src/java/org/apache/fop/fonts/EmbedFontInfo.java	(revision 711795)
+++ /home/dev/workspace/fop/src/java/org/apache/fop/fonts/EmbedFontInfo.java	(working copy)
@@ -17,6 +17,11 @@
 
 /* $Id$ */
 
+/* NOTICE: This file has been changed by Plutext Pty Ltd for use in docx4j.
+ * 
+ * This notice is included to meet the condition in clause 4(b) of the License. 
+ */
+
 package org.apache.fop.fonts;
 
 import java.io.IOException;
@@ -48,14 +53,41 @@
 
     private transient boolean embedded = true;
 
+    private boolean isEmbeddable = true;
+
+	public boolean isEmbeddable() {
+		return isEmbeddable;
+	}
+
+	public void setEmbeddable(boolean isEmbeddable) {
+		this.isEmbeddable = isEmbeddable;
+	}
+
+	protected Panose panose = null;
+
+	public Panose getPanose() {
+		return panose;
+	}
+
+	public void setPanose(Panose panose) {
+		this.panose = panose;
+	}
+    
     /**
-     * Main constructor
-     * @param metricsFile Path to the xml file containing font metrics
-     * @param kerning True if kerning should be enabled
-     * @param fontTriplets List of font triplets to associate with this font
-     * @param embedFile Path to the embeddable font file (may be null)
-     * @param subFontName the sub-fontname used for TrueType Collections (null otherwise)
-     */
+	 * Main constructor
+	 * 
+	 * @param metricsFile
+	 *            Path to the xml file containing font metrics
+	 * @param kerning
+	 *            True if kerning should be enabled
+	 * @param fontTriplets
+	 *            List of font triplets to associate with this font
+	 * @param embedFile
+	 *            Path to the embeddable font file (may be null)
+	 * @param subFontName
+	 *            the sub-fontname used for TrueType Collections (null
+	 *            otherwise)
+	 */
     public EmbedFontInfo(String metricsFile, boolean kerning,
                     List/*<FontTriplet>*/ fontTriplets, String embedFile, String subFontName) {
         this.metricsFile = metricsFile;
Index: /home/dev/workspace/fop/src/java/org/apache/fop/fonts/Enum.java
===================================================================
--- /home/dev/workspace/fop/src/java/org/apache/fop/fonts/Enum.java	(revision 0)
+++ /home/dev/workspace/fop/src/java/org/apache/fop/fonts/Enum.java	(revision 0)
@@ -0,0 +1,182 @@
+/*
+ * Copyright 1997-2004 The Apache Software Foundation
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/* NOTICE: This file has been changed by Plutext Pty Ltd for use in docx4j.
+ * 
+ * This notice is included to meet the condition in clause 4(b) of the License. 
+ */
+
+//package org.apache.avalon.framework;
+package org.apache.fop.fonts;
+
+import java.util.Map;
+
+/**
+ * Basic enum class for type-safe enums. Should be used as an abstract base. For example:
+ *
+ * <pre>
+ * import org.apache.avalon.framework.Enum;
+ *
+ * public final class Color extends Enum {
+ *   public static final Color RED = new Color( "Red" );
+ *   public static final Color GREEN = new Color( "Green" );
+ *   public static final Color BLUE = new Color( "Blue" );
+ *
+ *   private Color( final String color )
+ *   {
+ *     super( color );
+ *   }
+ * }
+ * </pre>
+ *
+ * If further operations, such as iterating over all items, are required, the
+ * {@link #Enum(String, Map)} constructor can be used to populate a <code>Map</code>, from which
+ * further functionality can be derived:
+ * <pre>
+ * public final class Color extends Enum {
+ *   static final Map map = new HashMap();
+ *
+ *   public static final Color RED = new Color( "Red", map );
+ *   public static final Color GREEN = new Color( "Green", map );
+ *   public static final Color BLUE = new Color( "Blue", map );
+ *
+ *   private Color( final String color, final Map map )
+ *   {
+ *     super( color, map );
+ *   }
+ *
+ *   public static Iterator iterator()
+ *   {
+ *     return map.values().iterator();
+ *   }
+ * }
+ * </pre>
+ *
+ * <p>
+ * <em>NOTE:</em> between 4.0 and 4.1, the constructors' access has been changed
+ * from <code>public</code> to <code>protected</code>. This is to prevent users
+ * of the Enum breaking type-safety by defining new Enum items. All Enum items
+ * should be defined in the Enum class, as shown above.
+ * </p>
+ *
+ *
+ * @author <a href="mailto:dev@avalon.apache.org">Avalon Development Team</a>
+ * @version $Id$
+ */
+public abstract class Enum
+{
+    /**
+     * The string representation of the Enum.
+     */
+    private final String m_name;
+
+    /**
+     * Constructor to add a new named item.
+     * <p>
+     * <em>Note:</em> access changed from <code>public</code> to
+     * <code>protected</code> after 4.0. See class description.
+     * </p>
+     *
+     * @param name Name of the item.
+     */
+    protected Enum( final String name )
+    {
+        this( name, null );
+    }
+
+    /**
+     * Constructor to add a new named item.
+     * <p>
+     * <em>Note:</em> access changed from <code>public</code> to
+     * <code>protected</code> after 4.0. See class description.
+     * </p>
+     *
+     * @param name Name of the item.
+     * @param map A <code>Map</code>, to which will be added a pointer to the newly constructed
+     * object.
+     */
+    protected Enum( final String name, final Map map )
+    {
+        m_name = name;
+        if( null != map )
+        {
+            map.put( name, this );
+        }
+    }
+
+    /**
+     * Tests for equality. Two Enum:s are considered equal
+     * if they are of the same class and have the same names.
+     * The method is also declared final - I (LSutic) did this to
+     * allow the JIT to inline it easily.
+     *
+     * @param o the other object
+     * @return the equality status
+     */
+    public boolean equals( Object o )
+    {
+        if( this == o )
+            return true;
+        if( !(o instanceof Enum) )
+            return false;
+
+        final Enum enumerated = (Enum)o;
+
+        if( !getClass().equals( enumerated.getClass() ) )
+            return false;
+        if( m_name != null ? !m_name.equals( enumerated.m_name ) : enumerated.m_name != null )
+            return false;
+
+        return true;
+    }
+
+    public int hashCode()
+    {
+        int result;
+        result = (m_name != null ? m_name.hashCode() : 0);
+        result = 29 * result + getClass().hashCode();
+        return result;
+    }
+
+    /**
+     * Returns a hash code value for the object.
+     *
+     * @return a hash code value for this object
+     */
+    /*public int hashCode()
+    {
+        return m_name.hashCode() ^ this.getClass().getName().hashCode();
+    }*/
+
+    /**
+     * Retrieve the name of this Enum item, set in the constructor.
+     * @return the name <code>String</code> of this Enum item
+     */
+    public final String getName()
+    {
+        return m_name;
+    }
+
+    /**
+     * Human readable description of this Enum item. For use when debugging.
+     * @return String in the form <code>type[name]</code>, eg.:
+     * <code>Color[Red]</code>.
+     */
+    public String toString()
+    {
+        return getClass().getName() + "[" + m_name + "]";
+    }
+}
Index: /home/dev/workspace/fop/src/java/org/apache/fop/fonts/FontType.java
===================================================================
--- /home/dev/workspace/fop/src/java/org/apache/fop/fonts/FontType.java	(revision 711795)
+++ /home/dev/workspace/fop/src/java/org/apache/fop/fonts/FontType.java	(working copy)
@@ -19,7 +19,8 @@
 
 package org.apache.fop.fonts;
 
-import org.apache.avalon.framework.ValuedEnum;
+//import org.apache.avalon.framework.ValuedEnum;
+import org.apache.fop.fonts.ValuedEnum;
 
 /**
  * This class enumerates all supported font types.
Index: /home/dev/workspace/fop/src/java/org/apache/fop/fonts/MultiByteFont.java
===================================================================
--- /home/dev/workspace/fop/src/java/org/apache/fop/fonts/MultiByteFont.java	(revision 711795)
+++ /home/dev/workspace/fop/src/java/org/apache/fop/fonts/MultiByteFont.java	(working copy)
@@ -17,6 +17,11 @@
 
 /* $Id$ */
 
+/* NOTICE: This file has been changed by Plutext Pty Ltd for use in docx4j.
+ * 
+ * This notice is included to meet the condition in clause 4(b) of the License. 
+ */
+
 package org.apache.fop.fonts;
 
 //Java
@@ -118,10 +123,13 @@
         }
     }
 
-    /** {@inheritDoc} */
-    public boolean isEmbeddable() {
-        return !(getEmbedFileName() == null && getEmbedResourceName() == null);
-    }
+// Comment out - this overrides the value derived by TTFFile, which 
+// is not what we want.    
+    
+//    /** {@inheritDoc} */
+//    public boolean isEmbeddable() {
+//        return !(getEmbedFileName() == null && getEmbedResourceName() == null);
+//    }
 
     /** {@inheritDoc} */
     public CIDSubset getCIDSubset() {
Index: /home/dev/workspace/fop/src/java/org/apache/fop/fonts/Panose.java
===================================================================
--- /home/dev/workspace/fop/src/java/org/apache/fop/fonts/Panose.java	(revision 0)
+++ /home/dev/workspace/fop/src/java/org/apache/fop/fonts/Panose.java	(revision 0)
@@ -0,0 +1,376 @@
+/*
+ * Copyright 2006 The FOray Project.
+ *      http://www.foray.org
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * This work is in part derived from the following work(s), used with the
+ * permission of the licensor:
+ *      Apache FOP, licensed by the Apache Software Foundation
+ *
+ */
+
+/*
+ * $LastChangedRevision: 10482 $
+ * $LastChangedDate: 2008-03-23 02:59:39 +1100 (Sun, 23 Mar 2008) $
+ * $LastChangedBy$
+ */
+
+/* NOTICE: This file has been changed by Plutext Pty Ltd for use in docx4j.
+ * 
+ * This notice is included to meet the condition in clause 4(b) of the License. 
+ */
+
+//package org.foray.font.format;
+package org.apache.fop.fonts;
+
+
+
+/**
+ * A PANOSE-1 classification number.
+ *
+ * <p>References:</p>
+ * <ul>
+ *   <li><a href="http://fonts.apple.com/TTRefMan/RM06/Chap6OS2.html">The TTF OS/2 Table
+ * doc</a></li>
+ *   <li><a href="http://www.w3.org/Fonts/Panose/pan2.html#StaticDigits">Panose 2.0 White
+ * Paper</a></li>
+ *   <li><a href="http://www.byte.com/art/9405/sec12/art1.htm">The Panose Typeface-Matching
+ * System</a></li>
+ *   <li>Michael S. De Laurentis, PANOSE 1.0 Core Mapper Services, Hewlett-Packard Document
+ * EWC-93-0023b, Hewlett-Packard Corporation, 101 Stewart, Suite 700, Seattle, WA 98101 (1993).</li>
+ *   <li><a href="www.fonts.com/hp/panose/greybook">The "Grey Book"</a></li>
+ * </ul>
+ */
+public final class Panose {
+
+    /**
+     * Enumeration of the fields that comprise a PANOSE description.
+     * @see "http://fonts.apple.com/TTRefMan/RM06/Chap6OS2.html"
+     */
+    public enum Field {
+        /** The bFamilyType field. */
+        FAMILY_TYPE ((byte) 0, (byte) 5),
+
+        /** The bSerifStyle field. */
+        SERIF_STYLE ((byte) 1, (byte) 15),
+
+        /** The bWeight field. */
+        WEIGHT ((byte) 2, (byte) 11),
+
+        /** The bProportion field. */
+        PROPORTION ((byte) 3, (byte) 9),
+
+        /** The bContrast field. */
+        CONTRAST ((byte) 4, (byte) 9),
+
+        /** The bStrokeVariatoon field. */
+        STROKE_VARIATION ((byte) 5, (byte) 8),
+
+        /** The bArmStyle field. */
+        ARM_STYLE ((byte) 6, (byte) 11),
+
+        /** The bLetterform field. */
+        LETTERFORM ((byte) 7, (byte) 15),
+
+        /** The bMidline field. */
+        MIDLINE ((byte) 8, (byte) 13),
+
+        /** The bXHeight field. */
+        X_HEIGHT ((byte) 9, (byte) 7);
+
+        /** The 0-based index of this element in the PANOSE array. */
+        private byte index;
+
+        /** The maximum value that is permissible for this element. */
+        private byte maxValue;
+
+        /**
+         * Private Constructor.
+         * @param index The 0-based index of this element in the PANOSE array.
+         * @param maxValue The maximum value that is permissible for this element.
+         */
+        private Field(final byte index, final byte maxValue) {
+            this.index = index;
+            this.maxValue = maxValue;
+        }
+
+        /**
+         * Returns the 0-based index of this element in the PANOSE array.
+         * @return The 0-based index of this element in the PANOSE array.
+         */
+        public byte getIndex() {
+            return this.index;
+        }
+
+        /**
+         * Returns the maximum valid value for this field.
+         * @return The maximum valid value for this field.
+         */
+        public byte getMaxValue() {
+            return this.maxValue;
+        }
+
+    }
+
+    /**
+     * Constant indicating the minimum italic value for the letterform field.
+     * This is based on an analysis of the MS ClearType Collection fonts:
+     * <ul>
+     * <li>consolas             [ 2 11 6 9 2 2 4 3 2 4 ]  bold 6 ital 3</li>
+     * <li>consolas-bold        [ 2 11 7 9 2 2 4 3 2 4 ]  bold 7 ital 3</li>
+     * <li>consolas-italic      [ 2 11 6 9 2 2 4 10 2 4 ] bold 6 ital 10</li>
+     * <li>consolas-bolditalic  [ 2 11 7 9 2 2 4 10 2 4 ] bold 7 ital 10</li>
+     *
+     * <li>cordianew            [ 2 11 3 4 2 2 2 2 2 4 ]  bold 3 ital 2</li>
+     * <li>cordianew-bolditalic [ 2 11 6 4 2 2 2 9 2 4 ]  bold 6 ital 9</li>
+     *
+     * <li>calibri              [ 2 15 5 2 2 2 4 3 2 4 ]  bold 5 ital 3</li>
+     * <li>calibri-bold         [ 2 15 7 2 3 4 4 3 2 4 ]  bold 7 ital 3</li>
+     * <li>calibri-bolditalic   [ 2 15 7 2 3 4 4 10 2 4 ] bold 7 ital 10</li>
+     *
+     * <li>constantia           [ 2 3 6 2 5 3 6 3 3 3 ]   bold 6 ital 3</li>
+     * <li>constantia-bold      [ 2 3 7 2 6 3 6 3 3 3 ]   bold 7 ital 3 (note the 6 at index 4)</li>
+     * <li>constantia-italic    [ 2 3 6 2 5 3 6 10 3 3 ]  bold 6 ital 10</li>
+     *
+     * <li>candara-bold         [ 2 14 7 2 3 3 3 2 2 4 ]  bold 7 ital 2</li>
+     * <li>candara-italic       [ 2 14 5 2 3 3 3 9 2 4 ]  bold 5 ital 9</li>
+     * <li>candara-bolditalic   [ 2 14 7 2 3 3 3 9 2 4 ]  bold 7 ital 9</li>
+     *
+     * <li>cambria-bold         [ 2 4 8 3 5 4 6 3 2 4 ]   bold 8 ital 3</li>
+     * <li>cambria-italic       [ 2 4 5 3 5 4 6 10 2 4 ]  bold 5 ital 10</li>
+     * </ul>
+     */
+    private static final byte LETTERFORM_MIN_ITALIC = 9;
+
+    /**
+     * Constant indicating the minimum bold value for the weight field.
+     * This is based on an analysis of the MS ClearType Collection fonts, which can be found at
+     * {@link #LETTERFORM_MIN_ITALIC}.
+     */
+    private static final byte WEIGHT_MIN_BOLD = 7;
+
+    /** An array of weights indicating that all elements in a comparison between two PANOSE values
+     * shall be considered to be of the same weight. */
+    private static final byte[] NEUTRAL_WEIGHTS = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
+    /* Caveat: It is tempting to make NEUTRAL_WEIGHTS public and allow client apps to use it as a
+     * parameter. However, there is no way to protect the data inside it from corruption, so we
+     * have elected to keep it private and to allow "null" to be interpreted as the same value. */
+
+    /** The encapsulated array of PANOSE numbers. */
+    private byte[] panoseArray;
+
+    /**
+     * Private Constructor. Use {@link #makeInstance(byte[])} to create an instance of this class.
+     * @param panoseArray The array of bytes recording the PANOSE classification.
+     */
+    private Panose(final byte[] panoseArray) {
+        /* Clone the incoming array to protect our data from subsequent changes made to the original
+         * array. */
+        this.panoseArray = panoseArray.clone();
+    }
+
+    /**
+     * Creates a new Panose instance, first checking it for validity.
+     * @param panoseArray The array of bytes recording the PANOSE
+     * classification.
+     * @return The newly-created instance.
+     * @throws FontException If <code>panoseArray</code> contains an illegal value.
+     * @see #forceInstance(byte[])
+     */
+    public static Panose makeInstance(final byte[] panoseArray) {
+        final String panoseValidationMessage = Panose.validPanose(panoseArray);
+        if (panoseValidationMessage != null) {
+            throw new IllegalArgumentException("Illegal Panose Array: " + panoseValidationMessage);
+        }
+        return new Panose(panoseArray);
+    }
+
+    /**
+     * Creates a new Panose instance without any error checking.
+     * @param panoseArray The array of bytes recording the PANOSE classification.
+     * @return The newly-created instance.
+     * @see #makeInstance(byte[])
+     */
+    public static Panose forceInstance(final byte[] panoseArray) {
+        return new Panose(panoseArray);
+    }
+
+    /**
+     * Returns a clone of the the array of bytes representing the PANOSE number.
+     * To avoid the cost of this cloning operation, use {@link #getElement(int)} to obtain the
+     * value of individual elements in the array.
+     * @return The PANOSE array.
+     */
+    public byte[] getPanoseArray() {
+        return this.panoseArray.clone();
+    }
+
+    /**
+     * Returns a given element from the underlying Panose array.
+     * @param index The index to the element desired.
+     * @return The value of the element at <code>index</code>.
+     */
+    public byte getElement(final int index) {
+        return this.panoseArray[index];
+    }
+
+    /**
+     * Returns a given element from the underlying Panose array.
+     * @param field The field for which the value is desired.
+     * @return The value of the element at <code>field</code>.
+     */
+    public byte getElement(final Panose.Field field) {
+        final int index = field.getIndex();
+        return getElement(index);
+    }
+
+    /**
+     * Computes the weighted "closeness" of another Panose to this value.
+     * @param otherPanose Another Panose instance which is being compared to this.
+     * @param weights 10-element byte array of weights that should be used for each of the elements
+     * in the comparison.
+     * Values in this array must be between 0 and 127 inclusive.
+     * (This constant is documented at http://www.w3.org/Fonts/Panose/pan2.html#StaticDigits).
+     * Use null if all elements are to be weighted equally.
+     * @return The weighted difference between the two Panose values.
+     * A smaller value indicates that the two values are closer, and a larger
+     * value indicates that they are farther apart.
+     */
+    public long difference(final Panose otherPanose, final byte[] weights) {
+        /* This is a partial implementation of the "PANOSE Matching Heuristic" documented at:
+         * http://www.w3.org/Fonts/Panose/pan2.html#Heuristic. **/
+        byte[] weightsToUse = null;
+        if (weights == null) {
+            weightsToUse = Panose.NEUTRAL_WEIGHTS;
+        } else {
+            validateWeights(weights);
+            weightsToUse = weights;
+        }
+        long difference = 0;
+        for (int i = 0; i < Panose.Field.values().length; i++) {
+//            final int digit = panoseDescription.length - i;
+//            final int weight = (int) Math.round(Math.pow(2, digit - 1));
+            final int weight = weightsToUse[i];
+
+            final int thisDifference = this.getElement(i) - otherPanose.getElement(i);
+            difference += weight * thisDifference * thisDifference;
+        }
+        return difference;
+    }
+
+    /**
+     * Examines an array of weights, throwing various unchecked exceptions if the data is not valid.
+     * @param weights The array of weights to be tested.
+     */
+    private static void validateWeights(final byte[] weights) {
+        if (weights == null) {
+            throw new NullPointerException("Weights may not be null");
+        }
+        if (weights.length != Panose.Field.values().length) {
+            throw new IllegalArgumentException("Weights size expected: "
+                    + Panose.Field.values().length + ", actual: " + weights.length);
+        }
+        for (int i = 0; i < weights.length; i++) {
+            final byte weight = weights[i];
+            if (weight < 0
+                    || weight > Byte.MAX_VALUE) {
+                throw new IllegalArgumentException("Weight element " + i + " is outside the range "
+                        + "of 0 thru 127.");
+            }
+        }
+    }
+
+    /**
+     * Tests the validity of a panose description.
+     * @param panoseDescription The panose values to be tested.
+     * @return Null for a valid PANOSE description. For an invalid PANOSE description, returns a
+     * descriptive message indicating which element is invalid.
+     */
+    public static String validPanose(final byte[] panoseDescription) {
+        if (panoseDescription == null) {
+            return "Panose description cannot be null.";
+        }
+        if (panoseDescription.length != Panose.Field.values().length) {
+            return "Illegal Panose description size: " + panoseDescription.length;
+        }
+        for (int i = 0; i < panoseDescription.length; i++) {
+            final byte theByte = panoseDescription[i];
+            final Panose.Field panoseField = Panose.Field.values()[i];
+            final byte maxValue = panoseField.getMaxValue();
+            if (theByte < 0
+                    || theByte > maxValue) {
+                return "Invalid value " + theByte + " > " + maxValue + " in position " + i
+                        + " of " + toString(panoseDescription);
+            }
+        }
+        return null;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public String toString() {
+        return toString(this.panoseArray);
+    }
+
+    /**
+     * Returns a String representation of a Panose array.
+     * @param panoseArray The Panose array to be expressed as a String.
+     * @return The String representation of <code>panoseArray</code>.
+     */
+    private static String toString(final byte[] panoseArray) {
+        final StringBuilder sb = new StringBuilder(30);
+        sb.append("[ ");
+        for (int i = 0; i < panoseArray.length; i++) {
+            final byte theByte = panoseArray[i];
+            sb.append(theByte + " ");
+        }
+        sb.append("]");
+        return sb.toString();
+    }
+
+    /**
+     * Returns the bold version of this Panose instance.
+     * @return If this already describes a bold font, returns this. Otherwise, returns a new
+     * Panose instance that is identical to this, except describing a bold font.
+     */
+    public Panose getBold() {
+        final byte weightValue = this.getElement(Panose.Field.WEIGHT);
+        if (weightValue >= Panose.WEIGHT_MIN_BOLD) {
+            /* This Panose value is already bold. */
+            return this;
+        }
+        final byte[] newArray = this.panoseArray.clone();
+        newArray[Panose.Field.WEIGHT.getIndex()] = Panose.WEIGHT_MIN_BOLD;
+        return Panose.forceInstance(newArray);
+    }
+
+    /**
+     * Returns the italic version of this Panose instance.
+     * @return If this already describes an italic font, returns this. Otherwise, returns a new
+     * Panose instance that is identical to this, except describing an italic font.
+     */
+    public Panose getItalic() {
+        final byte letterformValue = this.getElement(Panose.Field.LETTERFORM);
+        if (letterformValue >= Panose.LETTERFORM_MIN_ITALIC) {
+            /* This Panose value is already italic. */
+            return this;
+        }
+        final byte[] newArray = this.panoseArray.clone();
+        newArray[Panose.Field.LETTERFORM.getIndex()] = Panose.LETTERFORM_MIN_ITALIC;
+        return Panose.forceInstance(newArray);
+    }
+
+
+}
Index: /home/dev/workspace/fop/src/java/org/apache/fop/fonts/truetype/TTFFile.java
===================================================================
--- /home/dev/workspace/fop/src/java/org/apache/fop/fonts/truetype/TTFFile.java	(revision 711795)
+++ /home/dev/workspace/fop/src/java/org/apache/fop/fonts/truetype/TTFFile.java	(working copy)
@@ -31,6 +31,7 @@
 import org.apache.xmlgraphics.fonts.Glyphs;
 
 import org.apache.fop.fonts.FontUtil;
+import org.apache.fop.fonts.Panose;
 
 /**
  * Reads a TrueType file or a TrueType Collection.
@@ -49,6 +50,9 @@
 
     private String encoding = "WinAnsiEncoding";    // Default encoding
 
+    /** Array containing the Panose information. */
+	private Panose panose;
+    
     private short firstChar = 0;
     private boolean isEmbeddable = true;
     private boolean hasSerifs = true;
@@ -1006,8 +1010,15 @@
                 isEmbeddable = true;
             }
             in.skip(11 * 2);
-            in.skip(10); //panose array
-            in.skip(4 * 4); //unicode ranges
+            
+            //in.skip(10); //panose array            
+            final byte[] panoseArray = new byte[10];
+			for (int i = 0; i < panoseArray.length; i++) {
+				panoseArray[i] = in.read();
+			}
+			this.panose = Panose.makeInstance(panoseArray);
+            
+            in.skip(4 * 4); // unicode ranges
             in.skip(4);
             in.skip(3 * 2);
             int v;
@@ -1549,6 +1560,10 @@
             return null;
         }
     }
+    
+    public Panose getPanose() {
+		return panose;
+	}    
 
     /*
      * Helper classes, they are not very efficient, but that really
Index: /home/dev/workspace/fop/src/java/org/apache/fop/fonts/truetype/TTFFontLoader.java
===================================================================
--- /home/dev/workspace/fop/src/java/org/apache/fop/fonts/truetype/TTFFontLoader.java	(revision 711795)
+++ /home/dev/workspace/fop/src/java/org/apache/fop/fonts/truetype/TTFFontLoader.java	(working copy)
@@ -130,6 +130,9 @@
         returnFont.setItalicAngle(Integer.parseInt(ttf.getItalicAngle()));
         returnFont.setMissingWidth(0);
         returnFont.setWeight(ttf.getWeightClass());
+        
+        returnFont.setPanose(ttf.getPanose() );
+        returnFont.setEmbeddable(ttf.isEmbeddable() );
 
         if (isCid) {
             multiFont.setCIDType(CIDFontType.CIDTYPE2);
Index: /home/dev/workspace/fop/src/java/org/apache/fop/fonts/ValuedEnum.java
===================================================================
--- /home/dev/workspace/fop/src/java/org/apache/fop/fonts/ValuedEnum.java	(revision 0)
+++ /home/dev/workspace/fop/src/java/org/apache/fop/fonts/ValuedEnum.java	(revision 0)
@@ -0,0 +1,234 @@
+/*
+ * Copyright 1997-2004 The Apache Software Foundation
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/* NOTICE: This file has been changed by Plutext Pty Ltd for use in docx4j.
+ * 
+ * This notice is included to meet the condition in clause 4(b) of the License. 
+ */
+
+//package org.apache.avalon.framework;
+package org.apache.fop.fonts;
+
+import java.util.Map;
+
+/**
+ * Basic enum class for type-safe enums with values. Valued enum items can be compared and ordered
+ * with the provided methods. Should be used as an abstract base. For example:
+ *
+ * <pre>
+ * import org.apache.avalon.framework.ValuedEnum;
+ *
+ * public final class JavaVersion
+ *   extends ValuedEnum
+ * {
+ *   //standard enums for version of JVM
+ *   public static final JavaVersion  JAVA1_0  = new JavaVersion( "Java 1.0", 100 );
+ *   public static final JavaVersion  JAVA1_1  = new JavaVersion( "Java 1.1", 110 );
+ *   public static final JavaVersion  JAVA1_2  = new JavaVersion( "Java 1.2", 120 );
+ *   public static final JavaVersion  JAVA1_3  = new JavaVersion( "Java 1.3", 130 );
+ *
+ *   private JavaVersion( final String name, final int value )
+ *   {
+ *     super( name, value );
+ *   }
+ * }
+ * </pre>
+ *
+ * The above class could then be used as follows:
+ * <pre>
+ * import org.apache.avalon.framework.context.Context;
+ * import org.apache.avalon.framework.context.Contextualizable;
+ * import org.apache.avalon.framework.context.ContextException;
+ *
+ * public class MyComponent implements Contextualizable
+ * {
+ *   JavaVersion requiredVer = JavaVersion.JAVA1_2;
+ *
+ *   public void contextualize(Context context)
+ *       throws ContextException
+ *   {
+ *     JavaVersion ver = (JavaVersion)context.get("java.version");
+ *     if ( ver.isLessThan( requiredVer ) )
+ *     {
+ *       throw new RuntimeException( requiredVer.getName()+" or higher required" );
+ *     }
+ *   }
+ * }
+ * </pre>
+ *
+ * As with <code>Enum</code>, the {@link #ValuedEnum(String, int, Map)} constructor can be used to
+ * populate a <code>Map</code>, from which further functionality can be derived.
+ *
+ * <p>
+ * <em>NOTE:</em> between 4.0 and 4.1, the constructors' access has been changed
+ * from <code>public</code> to <code>protected</code>. This is to prevent users
+ * of the Enum breaking type-safety by defining new Enum items. All Enum items
+ * should be defined in the Enum class, as shown above.
+ * </p>
+ *
+ * @author <a href="mailto:dev@avalon.apache.org">Avalon Development Team</a>
+ * @version $Id$
+ */
+public abstract class ValuedEnum
+    extends Enum
+{
+    /**
+     * The value contained in enum.
+     */
+    private final int m_value;
+
+    /**
+     * Constructor for enum item.
+     *
+     * <p>
+     * <em>Note:</em> access changed from <code>public</code> to
+     * <code>protected</code> after 4.0. See class description.
+     * </p>
+     *
+     *
+     * @param name the name of enum item.
+     * @param value the value of enum item.
+     */
+    protected ValuedEnum( final String name, final int value )
+    {
+        this( name, value, null );
+    }
+
+    /**
+     * Constructor for enum item so that it gets added to Map at creation.
+     * Adding to a map is useful for implementing find...() style methods.
+     *
+     * </p>
+     * <em>Note:</em> access changed from <code>public</code> to
+     * <code>protected</code> after 4.0. See class description.
+     * </p>
+     *
+     * @param name the name of enum item.
+     * @param value the value of enum item.
+     * @param map the <code>Map</code> to add enum item to.
+     */
+    protected ValuedEnum( final String name, final int value, final Map map )
+    {
+        super( name, map );
+        m_value = value;
+    }
+
+    /**
+     * Get value of enum item.
+     *
+     * @return the enum item's value.
+     */
+    public final int getValue()
+    {
+        return m_value;
+    }
+
+    /**
+     * Test if enum item is equal in value to other enum.
+     *
+     * @param other the other enum
+     * @return true if equal
+     */
+    public final boolean isEqualTo( final ValuedEnum other )
+    {
+        return m_value == other.m_value;
+    }
+
+    /**
+     * Test if enum item is greater than in value to other enum.
+     *
+     * @param other the other enum
+     * @return true if greater than
+     */
+    public final boolean isGreaterThan( final ValuedEnum other )
+    {
+        return m_value > other.m_value;
+    }
+
+    /**
+     * Test if enum item is greater than or equal in value to other enum.
+     *
+     * @param other the other enum
+     * @return true if greater than or equal
+     */
+    public final boolean isGreaterThanOrEqual( final ValuedEnum other )
+    {
+        return m_value >= other.m_value;
+    }
+
+    /**
+     * Test if enum item is less than in value to other enum.
+     *
+     * @param other the other enum
+     * @return true if less than
+     */
+    public final boolean isLessThan( final ValuedEnum other )
+    {
+        return m_value < other.m_value;
+    }
+
+    /**
+     * Test if enum item is less than or equal in value to other enum.
+     *
+     * @param other the other enum
+     * @return true if less than or equal
+     */
+    public final boolean isLessThanOrEqual( final ValuedEnum other )
+    {
+        return m_value <= other.m_value;
+    }
+
+    /**
+     * Tests for equality. Two Enum:s are considered equal
+     * if they are of the same class, have the same name, and same value.
+     *
+     * @param o the other object
+     * @return the equality status
+     */
+    public boolean equals( Object o )
+    {
+        boolean prelim = super.equals( o );
+        if( ! prelim )
+            return false;
+            
+        if( !(o instanceof ValuedEnum) )
+            return false;
+
+        final ValuedEnum enumerated = (ValuedEnum) o;
+        return m_value == enumerated.m_value;
+    }
+    
+    public int hashCode()
+    {
+        int hash = super.hashCode();
+        hash ^= m_value;
+        hash >>>= (m_value & 31 );
+        return hash;
+    }
+    
+    
+    /**
+     * Override toString method to produce human readable description.
+     *
+     * @return String in the form <code>type[name=value]</code>, eg.:
+     * <code>JavaVersion[Java 1.0=100]</code>.
+     */
+    public String toString()
+    {
+        return getClass().getName() + "[" + getName() + "=" + m_value + "]";
+    }
+}
+
